{"version":3,"sources":["features/symbol/useSymbol.tsx","pages/TopPage.tsx","app/Layout.tsx","pages/AccountPage.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["getNetwork","a","assert","process","nodeUrl","repositoryFactory","RepositoryFactoryHttp","websocketInjected","WebSocket","websocketUrl","replace","getNetworkType","toPromise","networkType","getEpochAdjustment","epochAdjustment","getGenerationHash","networkGenerationHash","getCurrencies","networkCurrencyMosaicId","currency","mosaicId","networkHttp","createNetworkRepository","getTransactionFees","transactionFees","getAccountBalance","address","createAccountRepository","getAccountInfo","Address","createFromRawAddress","then","accountInfo","mosaics","filter","mosaic","id","equals","reduce","acc","curr","add","Long","fromString","amount","toString","ZERO","useSymbol","createTransferTx","recipientAddr","message","TransferTransaction","create","Deadline","Mosaic","UInt64","fromNumericString","PlainMessage","setMaxFee","averageFeeMultiplier","getAccount","signerPrivateKey","Account","createFromPrivateKey","signTx","tx","signer","sign","sendXym","recipient","privateKey","signedTx","announceTx","createTransactionRepository","announce","waitForConfirmTx","listener","createListener","open","Promise","resolve","reject","newBlock","confirmed","hash","subscribe","e","console","error","getConfirmedTx","finally","close","txHash","getTransaction","TransactionGroup","Confirmed","catch","createAccount","generateNewAccount","NetworkType","TEST_NET","fromXYM","xym","split","integer","decimal","mul","slice","TopPage","useState","setAddress","newAddress","setNewAddress","newPrivateKey","setNewPrivateKey","submitting","setSubmitting","errorText","setErrorText","showModal","setShowModal","history","useHistory","addToast","useToasts","onClickCreateAccount","window","confirm","account","createdAddress","plain","appearance","autoDismiss","copyAddress","copy","copyPrivateKey","className","onSubmit","event","preventDefault","test","push","action","method","htmlFor","name","type","required","value","onChange","target","disabled","onClick","icon","faCopy","Layout","children","to","Path","top","toXYM","microXYM","mod","div","AccountPage","useParams","balance","setBalance","setRecipient","setAamount","setMessage","setPrivateKey","errorRecipientText","setErrorRecipientText","errorAmountText","setErrorAmountText","errorPrivateKeyText","setErrorPrivateKeyText","validate","updateBalance","useCallback","b","useEffect","rows","App","basename","exact","path","component","fetchCount","setTimeout","data","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","initialState","status","reducers","increment","state","decrement","incrementByAmount","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.241985fc.chunk.js","sourcesContent":["import {\n  Account,\n  Address,\n  Deadline,\n  Mosaic,\n  NetworkType, PlainMessage,\n  RepositoryFactoryHttp, SignedTransaction, Transaction, TransactionGroup,\n  TransferTransaction,\n  UInt64\n} from \"symbol-sdk\";\nimport Long from \"long\";\nimport assert from \"assert\";\n\nconst getNetwork = async () => {\n  assert(process.env.REACT_APP_NODE_URL);\n  const nodeUrl = process.env.REACT_APP_NODE_URL;\n\n  // ブロックチェーン上の各種データにアクセスするための「リポジトリ」のファクトリ\n  const repositoryFactory = new RepositoryFactoryHttp(nodeUrl,  {\n    // ブラウザ環境の WebSocket API を注入\n    websocketInjected: WebSocket,\n    // ノードURL から WebSocket URL を生成\n    websocketUrl: nodeUrl.replace('http', 'ws') + '/ws',\n  });\n  // ネットワークタイプ（Mainnet なのか Testnet なのか）\n  const networkType = await repositoryFactory.getNetworkType().toPromise();\n  // ブロックチェーンの初期ブロックが生成されたときの時間（Unixtime秒）。トランザクションの期限を設定するときに使用する。\n  const epochAdjustment = await repositoryFactory.getEpochAdjustment().toPromise();\n  // ブロックチェーンの初期ブロックのハッシュ値。トランザクションに署名するときに使用する。\n  const networkGenerationHash = await repositoryFactory.getGenerationHash().toPromise();\n  // ネットワーク通貨のモザイクIDを取得（XYMのモザイクID）\n  const networkCurrencyMosaicId = (await repositoryFactory.getCurrencies().toPromise()).currency.mosaicId;\n  assert(networkCurrencyMosaicId);\n  // 各種ネットワークパラメータを取得できるリポジトリ\n  const networkHttp = repositoryFactory.createNetworkRepository();\n  // 現在のトランザクション手数料の係数を取得（ノードによって、ネットワークの状況によって変化する参考値）\n  const transactionFees = await networkHttp.getTransactionFees().toPromise();\n\n  // TODO: 物によっては呼び出す度にノードへのアクセスが発生するため、以下の戻り値はキャッシュしたほうがいいでしょう。\n  return {\n    repositoryFactory,\n    epochAdjustment,\n    networkGenerationHash,\n    networkCurrencyMosaicId,\n    transactionFees,\n    networkType,\n  };\n}\n\nconst getAccountBalance = async (address: string) => {\n  const { repositoryFactory, networkCurrencyMosaicId } = await getNetwork();\n\n  return repositoryFactory.createAccountRepository()\n    .getAccountInfo(Address.createFromRawAddress(address))\n    .toPromise()\n    .then((accountInfo) => {\n      // XYM だけを合計する（配列にはモザイクがユニークで現れるが、一応 reduce で合計）\n      return accountInfo.mosaics\n        .filter((mosaic) => mosaic.id.equals(networkCurrencyMosaicId))\n        .reduce((acc, curr) => acc.add(Long.fromString(curr.amount.toString())), Long.ZERO);\n    });\n}\n\nexport const useSymbol = () => {\n  const createAccount = () => {\n    const account = Account.generateNewAccount(NetworkType.TEST_NET)\n    return account\n  }\n\n  const createTransferTx = async (recipientAddr: string, amount: Long, message: string) => {\n    const { networkType, epochAdjustment, networkCurrencyMosaicId, transactionFees } = await getNetwork();\n\n    return TransferTransaction.create(\n      // トランザクションの有効期限。期限までにブロックチェーンで承認されなければ破棄される（＝失敗する）。\n      // ここでは何も時間を指定してないので、デフォルトの2時間。\n      Deadline.create(epochAdjustment),\n      // 受取人のアドレス\n      Address.createFromRawAddress(recipientAddr),\n      // 送金するモザイクと金額（ここではネイティブ通貨の XYM を送ります）\n      [new Mosaic(networkCurrencyMosaicId, UInt64.fromNumericString(amount.toString()))],\n      // トランザクションに好きなメッセージを添付できます。\n      PlainMessage.create(message),\n      // Mainnet なのか Testnet なのか\n      networkType)\n      // 手数料率の「最大値」を設定。ここではノードから提示される平均的な処理速度の手数料率を使用する。\n      // 手数料は `手数料率ｘトランザクションサイズ` で決まりますが、トランザクションを実行するまで厳密には決まりません。\n      // ここで設定するのは支払いを許容する最大の手数料で、最終的に支払う手数料は必ずこれ以下になります。\n      .setMaxFee(transactionFees.averageFeeMultiplier);\n  }\n\n  const getAccount = async (signerPrivateKey: string) => {\n    const { networkType } = await getNetwork();\n    return Account.createFromPrivateKey(signerPrivateKey, networkType);\n  }\n\n  const signTx = async (tx: Transaction, signer: Account) => {\n    const { networkGenerationHash } = await getNetwork();\n\n    // networkGenerationHash を指定する事で、そのネットワークでのみ通用するトランザクションになります。\n    // つまり間違ったネットワークでアナウンスしておかしなことにならない様にできます。\n    return signer.sign(tx, networkGenerationHash);\n  }\n\n  const sendXym = async (recipient: string, amount: Long, message: string, privateKey: string) => {\n    const tx = await createTransferTx(recipient, amount, message);\n    const signer = await getAccount(privateKey);\n    const signedTx = await signTx(tx, signer);\n    await announceTx(signedTx);\n    return { signer, signedTx }\n  }\n\n  const announceTx = async (signedTx: SignedTransaction) => {\n    const { repositoryFactory } = await getNetwork();\n\n    // アナウンスしたら直ぐに Promise が解決されます。トランザクションの承認までは待ちません。\n    return repositoryFactory\n      .createTransactionRepository()\n      .announce(signedTx)\n      .toPromise();\n  }\n\n  const waitForConfirmTx = async (signer: Account, signedTx: SignedTransaction) => {\n    const { repositoryFactory } = await getNetwork();\n    const listener = repositoryFactory.createListener();\n\n    return listener.open().then(() => {\n      return new Promise((resolve, reject) => {\n        // 一定時間通信がないとタイムアウトするので、定期発生するブロック生成イベントを受信しておく。\n        // それが必要なければ削除。\n        listener.newBlock();\n        // 指定のトランザクションが承認されるのを待ちます。\n        listener.confirmed(signer.address, signedTx.hash)\n          .subscribe((tx) => {\n              resolve(tx);\n            },\n            (e) => {\n              console.error(e);\n              reject(e);\n            });\n\n        // リッスンする以前に承認済みだった場合をケア\n        const tx = getConfirmedTx(signedTx.hash);\n        if (tx) {\n          return resolve(tx);\n        }\n      }).finally(() => {\n        listener.close();\n      });\n    });\n  }\n\n  const getConfirmedTx = async (txHash: string) => {\n    const { repositoryFactory } = await getNetwork();\n\n    return repositoryFactory.createTransactionRepository()\n      .getTransaction(txHash, TransactionGroup.Confirmed)\n      .toPromise()\n      .catch((e) => undefined);\n  }\n\n  return {\n    createAccount,\n    getAccountBalance,\n    sendXym,\n    waitForConfirmTx\n  }\n}","import {useSymbol} from \"../features/symbol/useSymbol\";\nimport {useState} from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport {useToasts} from \"react-toast-notifications\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCopy } from \"@fortawesome/free-regular-svg-icons\";\nimport copy from 'clipboard-copy'\nimport Long from \"long\";\nimport assert from \"assert\";\n\n// XYM → Micro XYM へ変換\nconst fromXYM = (xym: string) => {\n  const [integer, decimal] = xym.split('.');\n\n  return Long.fromString(integer).mul(1000000).add(\n    Long.fromString(decimal ? (decimal + '000000').slice(0, 6) : '0')\n  );\n}\n\nconst TopPage: React.FC = () => {\n  const [address, setAddress] = useState(\"\");\n  const [newAddress, setNewAddress] = useState(\"\");\n  const [newPrivateKey, setNewPrivateKey] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n  const [errorText, setErrorText] = useState(\"\")\n  const [showModal, setShowModal] = useState(false)\n  const { createAccount, sendXym, waitForConfirmTx } = useSymbol()\n  const history = useHistory();\n  const { addToast } = useToasts()\n\n  const handleAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => setAddress(event.target.value);\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    setSubmitting(true);\n    event.preventDefault();\n    const regex = /^T[a-zA-Z0-9]{38}$/\n    if (!regex.test(address)) {\n      setErrorText('形式が正しくありません')\n    } else {\n      history.push(`/address/${address}`);\n    }\n    setSubmitting(false);\n  }\n\n  const closeModal = () => {\n    setShowModal(false)\n  }\n\n  const onClickCreateAccount = async () => {\n    if (window.confirm('本当にアカウントを作成しますか？アカウント作成時に送金テスト用に10XYM送金されます。')) {\n      const account = createAccount()\n      const createdAddress = account.address.plain()\n      setNewAddress(createdAddress)\n      setNewPrivateKey(account.privateKey)\n      setShowModal(true)\n      assert(process.env.REACT_APP_TEST_PRIVATE_KEY);\n      const testPrivateKey = process.env.REACT_APP_TEST_PRIVATE_KEY\n\n      try {\n        const { signer, signedTx } = await sendXym(\n          createdAddress,\n          fromXYM('10'),\n          '',\n          testPrivateKey // テストXYM送金用アカウント秘密鍵\n        )\n\n        addToast('トランザクションをアナウンスしました。完了までお待ちください',\n          {appearance: 'info', autoDismiss: true});\n\n        await waitForConfirmTx(signer, signedTx);\n\n        addToast('送金完了しました。着金までしばらくお待ちください',\n          {appearance: 'success', autoDismiss: true});\n      } catch (e) {\n        console.error(e);\n        addToast(`エラーが発生しました。${e.message}`, {appearance: 'error', autoDismiss: true});\n      }\n    }\n  }\n\n  const copyAddress = async () => {\n    await copy(newAddress)\n    addToast('アドレスをコピーしました。', { appearance: 'success', autoDismiss: true });\n  }\n\n  const copyPrivateKey = async () => {\n    await copy(newPrivateKey)\n    addToast('秘密鍵をコピーしました。', { appearance: 'success', autoDismiss: true });\n  }\n\n  return (\n    <div className=\"m-12\">\n      <h1 className=\"font-bold\">アドレス入力</h1>\n      <form onSubmit={onSubmit} className=\"mt-8 space-y-3\" action=\"#\" method=\"GET\">\n        <div className=\"mb-1\">\n          <label htmlFor=\"address\" className={`text-xs ${ errorText ? 'text-red-700' : 'text-gray-700' }`}>アドレス</label>\n        </div>\n        <div>\n          <input id=\"address\" name=\"address\" type=\"text\"\n                 required\n                 value={address}\n                 onChange={handleAddressChange}\n                 className={`appearance-none relative block w-1/3 px-3 py-2 border ${ errorText ? 'border-red-700' : 'border-gray-100 focus:ring-yellow-500 focus:border-yellow-500' } placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:z-10 sm:text-sm`}\n          />\n          <div className=\"mt-1 text-xs text-red-700\">{errorText}</div>\n        </div>\n        <button\n          type=\"submit\"\n          className=\"my-auto text-sm px-8 py-2 px-4 bg-transparent rounded-lg bg-yellow-500 text-black hover:bg-yellow-400 focus:outline-none\"\n          disabled={submitting}\n        >\n          次へ\n        </button>\n      </form>\n      <div className=\"mt-4\" >\n        <a\n          className=\"my-auto text-yellow-600 hover:text-yellow-400 hover:underline\"\n          onClick={onClickCreateAccount}\n        >\n          アカウントを作成する\n        </a>\n      </div>\n      <div\n        className={`modal fixed w-full h-full top-0 left-0 flex items-center justify-center${showModal ? '' :' opacity-0 pointer-events-none '}`}>\n        <div className=\"modal-overlay absolute w-full h-full bg-gray-900 opacity-50\" />\n\n        <div className=\"modal-container bg-white w-11/12 md:max-w-3xl mx-auto rounded shadow-lg z-50 overflow-y-auto\">\n\n          <div className=\"modal-content py-4 text-left px-6\">\n            <div className=\"flex justify-between items-center pb-3\">\n              <p className=\"text-xl font-bold\">\n                アカウントを作成しました\n                <br />\n                <span className=\"text-sm font-normal\">以下の情報を失くさないように保管してください</span>\n              </p>\n            </div>\n            <div className=\"mt-2 space-y-2\" >\n              <div className=\"mb-1\">\n                <label className=\"text-xs text-gray-700\">アドレス</label>\n              </div>\n              <p>\n                {newAddress}\n                <a\n                  className=\"ml-2 my-auto text-yellow-600 hover:text-yellow-400 hover:underline\"\n                  onClick={copyAddress}\n                >\n                  <FontAwesomeIcon icon={faCopy} />\n                  コピー\n                </a>\n              </p>\n              <div className=\"mb-1\">\n                <label className=\"text-xs text-gray-700\">秘密鍵</label>\n              </div>\n              <p>\n                {newPrivateKey}\n                <a\n                  className=\"ml-2 my-auto text-yellow-600 hover:text-yellow-400 hover:underline\"\n                  onClick={copyPrivateKey}\n                >\n                  <FontAwesomeIcon icon={faCopy} />\n                  コピー\n                </a>\n              </p>\n              <button\n                type=\"button\"\n                onClick={closeModal}\n                className=\"my-auto text-sm px-8 py-2 px-4 bg-transparent rounded-lg bg-yellow-500 text-black hover:bg-yellow-400 focus:outline-none\"\n              >\n                閉じる\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TopPage","import {Link} from \"react-router-dom\";\nimport {Path} from \"../App\";\n\nexport const Layout: React.FC = ({ children }) => {\n  return (\n    <>\n      <div className=\"relative bg-white\">\n        <div className=\"max-w-9xl mx-auto border-solid border-b border-gray-200 px-4 sm:px-6\">\n          <div className=\"flex justify-between items-center pt-4 pb-2 md:justify-start md:space-x-5\">\n            <div className=\"flex justify-start lg:w-0 lg:flex-1\">\n              <Link to={Path.top}>\n                <p className=\"text-yellow-500 font-bold\">Symbol Sample</p>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      <main className=\"mx-auto max-w-9xl\">\n        <div className=\"main-container\">\n          {children}\n        </div>\n      </main>\n    </>\n  )\n}","import {useSymbol} from \"../features/symbol/useSymbol\";\nimport {useParams} from \"react-router-dom\";\nimport {useCallback, useEffect, useState} from \"react\";\nimport {useToasts} from \"react-toast-notifications\";\nimport Long from \"long\";\n\n// Micro XYM → XYM へ変換\nconst toXYM = (microXYM: Long) => {\n  const decimal = ('000000' + microXYM.mod(1000000).toString()).slice(-6)\n    .replace(/0+$/g, '');\n  const integer = microXYM.div(1000000).toString();\n\n  return `${integer}${decimal && '.' + decimal}`;\n}\n\n// XYM → Micro XYM へ変換\nconst fromXYM = (xym: string) => {\n  const [integer, decimal] = xym.split('.');\n\n  return Long.fromString(integer).mul(1000000).add(\n    Long.fromString(decimal ? (decimal + '000000').slice(0, 6) : '0')\n  );\n}\n\nconst AccountPage: React.FC = () => {\n  const { address } = useParams<{address: string}>()\n  const { sendXym, getAccountBalance, waitForConfirmTx } = useSymbol()\n  const [balance, setBalance] = useState(Long.ZERO)\n  const { addToast } = useToasts()\n  const [submitting, setSubmitting] = useState(false);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAamount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [privateKey, setPrivateKey] = useState(\"\");\n  const [errorRecipientText, setErrorRecipientText] = useState(\"\")\n  const [errorAmountText, setErrorAmountText] = useState(\"\")\n  const [errorPrivateKeyText, setErrorPrivateKeyText] = useState(\"\")\n\n  const handleRecipientChange = (event: React.ChangeEvent<HTMLInputElement>) => setRecipient(event.target.value);\n  const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => setAamount(event.target.value);\n  const handleMessageChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => setMessage(event.target.value);\n  const handlePrivateKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => setPrivateKey(event.target.value);\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    setSubmitting(true);\n    event.preventDefault();\n\n    if (!validate()) {\n      setSubmitting(false);\n      return\n    }\n\n    try {\n      const { signer, signedTx } = await sendXym(recipient, fromXYM(amount), message, privateKey)\n\n      addToast('トランザクションをアナウンスしました。完了までお待ちください',\n        {appearance: 'info', autoDismiss: true});\n\n      await waitForConfirmTx(signer, signedTx);\n\n      addToast('送金完了しました',\n        {appearance: 'success', autoDismiss: true});\n      updateBalance();\n    } catch (e) {\n      console.error(e);\n      addToast(`エラーが発生しました。${e.message}`, {appearance: 'error', autoDismiss: true});\n    }\n    setSubmitting(false);\n  }\n\n  const validate = () => {\n    const recipientRegex = /^T[a-zA-Z0-9]{38}$/\n    if (!recipientRegex.test(recipient)) {\n      setErrorRecipientText('形式が正しくありません')\n    }\n\n    const amountRegex = /^([1-9]\\d*|0)(\\.\\d+)?$/\n    if (!amountRegex.test(amount)) {\n      setErrorAmountText('形式が正しくありません')\n    }\n\n    const privateKeyRegex = /^[a-fA-F0-9]{64}$/\n    if (!privateKeyRegex.test(privateKey)) {\n      setErrorPrivateKeyText('形式が正しくありません')\n    }\n    return (errorRecipientText === \"\" && errorAmountText === \"\" && errorPrivateKeyText === \"\")\n  }\n\n  const updateBalance = useCallback(() => {\n    getAccountBalance(address)\n      .then((b) => {\n        setBalance(b);\n      })\n      .catch(console.error);\n  }, []);\n\n  useEffect(() => {\n    updateBalance();\n  }, [updateBalance]);\n\n  return (\n    <div>\n      <div className=\"px-6 py-2 text-sm shadow-outline\">\n        <p><span className=\"text-gray-600\">アドレス： </span>{address}</p>\n        <p><span className=\"text-gray-600\">XYM残高： </span>{toXYM(balance)}</p>\n      </div>\n      <div className=\"bg-gray-100 h-full\">\n        <div className=\"p-4\">\n          <div className=\"p-8 bg-white shadow-sm w-3/5\">\n            <h1 className=\"font-bold\">送金</h1>\n            <form onSubmit={onSubmit} className=\"mt-8 space-y-3\" action=\"#\" method=\"GET\">\n              <div className=\"mt-2 mb-1\">\n                <label htmlFor=\"recipient\" className={`text-xs ${ errorRecipientText ? 'text-red-700' : 'text-gray-700' }`}>宛先</label>\n              </div>\n              <div>\n                <input id=\"recipient\" name=\"recipient\" type=\"text\"\n                       required\n                       value={recipient}\n                       onChange={handleRecipientChange}\n                       className={`appearance-none relative block w-3/5 px-3 py-2 border placeholder-gray-500 text-gray-900 rounded-md focus:outline-none ${ errorRecipientText ? 'border-red-700' : 'border-gray-100 focus:ring-yellow-500 focus:border-yellow-500' } focus:z-10 sm:text-sm`}\n                />\n                <div className=\"mt-1 text-xs text-red-700\">{errorRecipientText}</div>\n              </div>\n              <div className=\"mt-2 mb-1\">\n                <label htmlFor=\"amount\" className={`text-xs ${ errorAmountText ? 'text-red-700' : 'text-gray-700' }`}>金額</label>\n              </div>\n              <div>\n                <input id=\"amount\" name=\"amount\" type=\"number\"\n                       required\n                       value={amount}\n                       onChange={handleAmountChange}\n                       className={`appearance-none w-1/5 relative block px-3 py-2 border placeholder-gray-500 text-gray-900 rounded-md focus:outline-none ${ errorAmountText ? 'border-red-700' : 'border-gray-100 focus:ring-yellow-500 focus:border-yellow-500' } focus:z-10 sm:text-sm`}\n                />\n                <div className=\"mt-1 text-xs text-red-700\">{errorAmountText}</div>\n              </div>\n              <div className=\"mt-2 mb-1\">\n                <label htmlFor=\"recipient\" className=\"text-xs text-gray-700\">メッセージ</label>\n              </div>\n              <textarea id=\"message\" name=\"message\"\n                     value={message}\n                     onChange={handleMessageChange}\n                     rows={4}\n                     className=\"appearance-none relative block w-4/5 px-3 py-2 border border-gray-100 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-yellow-500 focus:border-yellow-500 focus:z-10 sm:text-sm\"\n              />\n              <div className=\"mt-2 mb-1\">\n                <label htmlFor=\"privateKey\" className={`text-xs ${ errorPrivateKeyText ? 'text-red-700' : 'text-gray-700' }`}>秘密鍵</label>\n              </div>\n              <div>\n                <input id=\"privateKey\" name=\"privateKey\" type=\"text\"\n                       required\n                       value={privateKey}\n                       onChange={handlePrivateKeyChange}\n                       className={`appearance-none relative block w-4/5 px-3 py-2 border placeholder-gray-500 text-gray-900 rounded-md focus:outline-none ${ errorPrivateKeyText ? 'border-red-700' : 'border-gray-100 focus:ring-yellow-500 focus:border-yellow-500' } focus:z-10 sm:text-sm`}\n                />\n                <div className=\"mt-1 text-xs text-red-700\">{errorPrivateKeyText}</div>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"text-sm px-8 py-2 bg-transparent rounded-lg bg-yellow-500 text-black hover:bg-yellow-400 focus:outline-none\"\n                disabled={submitting}\n              >\n                送金\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AccountPage","import React from 'react';\nimport { ToastProvider } from 'react-toast-notifications';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport TopPage from \"./pages/TopPage\";\nimport {Layout} from \"./app/Layout\";\nimport AccountPage from \"./pages/AccountPage\";\n\nexport const Path = {\n  top: '/',\n  address: `/address/:address`\n}\n\nconst ROUTER_BASENAME =\n  process.env.NODE_ENV === 'development' ? '/' : '/symbol-sdk-wallet-react-sample';\n\nfunction App() {\n  return (\n    <ToastProvider>\n      <BrowserRouter basename={ROUTER_BASENAME}>\n        <Layout>\n          <Switch>\n            <Route exact path={Path.address} component={AccountPage} />\n            <Route path={Path.top} component={TopPage} />\n          </Switch>\n        </Layout>\n      </BrowserRouter>\n    </ToastProvider>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}